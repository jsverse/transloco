"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[2415],{5137:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var s=t(2540),a=t(3023);const o={id:"translation-api",title:"Translation API",description:"Translation API | Transloco Angular i18n"},r=void 0,l={id:"translation-api",title:"Translation API",description:"Translation API | Transloco Angular i18n",source:"@site/docs/translation-api.mdx",sourceDirName:".",slug:"/translation-api",permalink:"/transloco/docs/translation-api",draft:!1,unlisted:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/translation-api.mdx",tags:[],version:"current",frontMatter:{id:"translation-api",title:"Translation API",description:"Translation API | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Translation in The Template",permalink:"/transloco/docs/translation-in-the-template"},next:{title:"Language API",permalink:"/transloco/docs/language-api"}},c={},i=[{value:"<code>translate()</code>",id:"translate",level:3},{value:"<code>selectTranslate()</code>",id:"selecttranslate",level:3},{value:"<code>translateObject()</code>",id:"translateobject",level:3},{value:"<code>selectTranslateObject()</code>",id:"selecttranslateobject",level:3},{value:"<code>getTranslation()</code>",id:"gettranslation",level:3},{value:"<code>selectTranslation()</code>",id:"selecttranslation",level:3},{value:"<code>setTranslation()</code>",id:"settranslation",level:3},{value:"<code>setTranslationKey()</code>",id:"settranslationkey",level:3},{value:"<code>events$</code>",id:"events",level:3}];function d(e){const n={admonition:"admonition",br:"br",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Below is a list of the ",(0,s.jsx)(n.code,{children:"TranslocoService"})," API and their usages:"]}),"\n",(0,s.jsx)(n.h3,{id:"translate",children:(0,s.jsx)(n.code,{children:"translate()"})}),"\n",(0,s.jsxs)(n.p,{children:["Translate the given key. Sometimes you may need to translate a key in a component or a service. To do so, you can inject the ",(0,s.jsx)(n.code,{children:"TranslocoService"})," and use its ",(0,s.jsx)(n.code,{children:"translate"})," method:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService.translate('hello');\n    this.translocoService.translate('hello', { value: 'world' });\n    this.translocoService.translate(['hello', 'key']);\n    this.translocoService.translate('hello', params, 'es');\n\n    // Translate a key from a specific scope\n    this.translocoService.translate('hello', params, 'todos/en');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsx)(n.p,{children:"Note that in order to safely use this method, you are responsible for ensuring that the translation files have been successfully loaded by the time it's called."})}),"\n",(0,s.jsxs)(n.p,{children:["If you aren't sure, you can use the ",(0,s.jsx)(n.code,{children:"selectTranslate()"})," method instead:"]}),"\n",(0,s.jsx)(n.h3,{id:"selecttranslate",children:(0,s.jsx)(n.code,{children:"selectTranslate()"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns an ",(0,s.jsx)(n.code,{children:"observable"})," that when subscribed loads the translation file and emits the translation of the given key:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  // Don't forget to unsubscribe\n  ngOnInit() {\n    this.translocoService.selectTranslate('hello')\n                         .subscribe(value => ...);\n\n    this.translocoService.selectTranslate('hello', params)\n                         .subscribe(value => ...);\n\n    this.translocoService.selectTranslate('hello', params, lang)\n                         .subscribe(value => ...);\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"selectTranslate"})," will emit each time the active language is changed."]}),"\n",(0,s.jsxs)(n.p,{children:["You can also select a translation from ",(0,s.jsx)(n.code,{children:"scope"}),", simply inject the scope using the ",(0,s.jsx)(n.code,{children:"TRANSLOCO_SCOPE"})," token\nand provide it to the ",(0,s.jsx)(n.code,{children:"selectTranslate"})," function:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(\n    private translocoService: TranslocoService,\n    @Inject(TRANSLOCO_SCOPE) private scope,\n  ) {}\n\n  ngOnInit() {\n    this.translocoService\n      .selectTranslate('title', params, this.scope)\n      .subscribe(console.log);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"translateobject",children:(0,s.jsx)(n.code,{children:"translateObject()"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",metastring:'title="en.json"',children:'{\n  "home": "Home",\n  "hello": "Hello {{ name }}",\n  "some": {\n    "object": {\n      "hi": "Hi",\n      "hey": "Hey"\n    }\n  },\n  "path": {\n    "to": {\n      "object": {\n        "welcome": "Welcome {{ name }}",\n        "nested": {\n          "subscribe": "subscribe today for {{ price }}$"\n        }\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The following code is based on the ",(0,s.jsx)(n.code,{children:"en.json"})," above \u261d"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns an ",(0,s.jsx)(n.code,{children:"object"})," based on the given path:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    let result = this.translocoService.translateObject('some.object');\n    expect(result).toEqual({\n      hi: 'Hi',\n      hey: 'Hey',\n    });\n\n    /* When querying an object that should be transpiled */\n    result = this.translocoService.translateObject('path.to.object', {\n      welcome: { value: 'John' },\n      'nested.subscribe': { price: 100 },\n    });\n    expect(result).toEqual({\n      welcome: 'Welcome John',\n      nested: {\n        subscribe: 'subscribe today for 100$',\n      },\n    });\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Given a ",(0,s.jsx)(n.code,{children:"key: params"})," map (",(0,s.jsx)(n.code,{children:"object"})," | ",(0,s.jsx)(n.code,{children:"Map"}),"), returns an ",(0,s.jsx)(n.code,{children:"array"})," of translated values:"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    /* If there are no parameters to transpile pass an empty `object` or `null` */\n    let keyParams = {\n      home: null, // {}\n    };\n    let result = this.translocoService.translateObject(keyParams);\n    expect(result).toEqual(['Home']);\n\n    /* When querying an object that should be transpiled */\n    keyParams = {\n      home: null,\n      hello: { name: 'John' },\n    };\n    result = this.translocoService.translateObject(keyParams);\n    expect(result).toEqual(['Home', 'Hello John']);\n\n    /* Works with object paths */\n    keyParams = {\n      hello: { name: 'John' },\n      'path.to.object.nested': { subscribe: { price: 100 } },\n    };\n    result = this.translocoService.translateObject(keyParams);\n    expect(result).toEqual(['Home', { subscribe: 'subscribe today for 100$' }]);\n\n    /* Works with `Map` */\n    keyParams = new Map();\n    keyParams.set('home', null);\n    result = this.translocoService.translateObject(keyParams);\n    expect(result).toEqual(['Home']);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsx)(n.p,{children:"Note that in order to safely use this method, you are responsible for ensuring that the translation files have been successfully loaded by the time it's called."})}),"\n",(0,s.jsxs)(n.p,{children:["If you aren't sure, you can use the ",(0,s.jsx)(n.code,{children:"selectTranslateObject()"})," method instead:"]}),"\n",(0,s.jsx)(n.h3,{id:"selecttranslateobject",children:(0,s.jsx)(n.code,{children:"selectTranslateObject()"})}),"\n",(0,s.jsxs)(n.p,{children:["Load the translation file (if not loaded yet) and behaves the same as ",(0,s.jsx)(n.code,{children:"translateObject"}),".\nThe only difference is that this method returns an observable to which you can subscribe."]}),"\n",(0,s.jsxs)(n.p,{children:["The following code is based on the ",(0,s.jsx)(n.code,{children:"en.json"})," in ",(0,s.jsx)(n.code,{children:"translateObject"})," \u261d"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService\n      .selectTranslateObject('path.to.object', {\n        welcome: { value: 'John' },\n        'nested.subscribe': { price: 100 },\n      })\n      .subscribe((result) => {\n        expect(result).toEqual({\n          welcome: 'Welcome John',\n          nested: {\n            subscribe: 'subscribe today for 100$',\n          },\n        });\n      });\n\n    keyParams = {\n      hello: { name: 'John' },\n      'path.to.object.nested': { subscribe: { price: 100 } },\n    };\n    this.translocoService\n      .selectTranslateObject(keyParams)\n      .subscribe((result) => {\n        expect(result).toEqual([\n          'Home',\n          { subscribe: 'subscribe today for 100$' },\n        ]);\n      });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"gettranslation",children:(0,s.jsx)(n.code,{children:"getTranslation()"})}),"\n",(0,s.jsx)(n.p,{children:"Returns the selected language translation or a scope translation, if a language isn't passed, the method will return the entire translation map:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService.getTranslation();\n    this.translocoService.getTranslation('es');\n    this.translocoService.getTranslation('todos/es');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"selecttranslation",children:(0,s.jsx)(n.code,{children:"selectTranslation()"})}),"\n",(0,s.jsxs)(n.p,{children:["Returns an ",(0,s.jsx)(n.code,{children:"observable"})," that when subscribed loads and emits the given language translation object, if no language is passed the active language will be used.",(0,s.jsx)(n.br,{}),"\n","This method can also be used to retrieve a scope translation object:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  // Don't forget to unsubscribe\n  ngOnInit() {\n    this.translocoService.selectTranslation('es').subscribe(console.log);\n\n    this.translocoService.selectTranslation('todos/es').subscribe(console.log);\n\n    // Will emit a new value on language changes.\n    this.translocoService.selectTranslation().subscribe(console.log);\n\n    this.translocoService.selectTranslation('todos').subscribe(console.log);\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"settranslation",children:(0,s.jsx)(n.code,{children:"setTranslation()"})}),"\n",(0,s.jsx)(n.p,{children:"Manually sets a translations object to be used for a given language, set merge to true if you want to append the translations instead of replacing them:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n   this.translocoService.setTranslation({ key: value });\n   this.translocoService.setTranslation({ ... }, 'es');\n   this.translocoService.setTranslation({ ... }, 'en', { merge: false } );\n\n   // Set a scope\n   this.translocoService.setTranslation({ ... }, 'todos/en');\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"settranslationkey",children:(0,s.jsx)(n.code,{children:"setTranslationKey()"})}),"\n",(0,s.jsx)(n.p,{children:"Sets the translated value of a key. If a language isn't specified in the third parameter, it sets the key value for the current active language:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService.setTranslationKey('key', 'value');\n    this.translocoService.setTranslationKey('key.nested', 'value');\n    this.translocoService.setTranslationKey('key', 'value', 'en');\n    this.translocoService.setTranslationKey('key', 'value', 'en', {\n      emitChange: false,\n    });\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"events",children:(0,s.jsx)(n.code,{children:"events$"})}),"\n",(0,s.jsx)(n.p,{children:"Subscribe to the translation loading events:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"export class AppComponent {\n  constructor(private translocoService: TranslocoService) {}\n\n  ngOnInit() {\n    this.translocoService.events$.pipe(\n      filter(e => e.type === 'translationLoadSuccess'),\n      pluck('payload')\n    ).subscribe(({ langName, scope }) => ...);\n\n    this.translocoService.events$.pipe(\n      filter(e => e.type === 'translationLoadFailure'),\n      pluck('payload')\n    ).subscribe(({ langName, scope }) => ...);\n\n    this.translocoService.events$.pipe(\n      filter(e => e.type === 'langChanged'),\n      pluck('payload')\n    ).subscribe(({ langName, scope }) => ...);\n}\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"important",children:(0,s.jsx)(n.p,{children:"Note that these events will only fire when the translation is loaded from the server, meaning that when switching from a given lang and back won't trigger the events again since the language is loaded from the cache."})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var s=t(3696);const a={},o=s.createContext(a);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);