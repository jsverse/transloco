"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[4241],{6241:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>i,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var o=e(4848),t=e(8453);const r={title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n"},a=void 0,l={id:"plugins/persist-translations",title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n",source:"@site/docs/plugins/persist-translations.mdx",sourceDirName:"plugins",slug:"/plugins/persist-translations",permalink:"/transloco/docs/plugins/persist-translations",draft:!1,unlisted:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/plugins/persist-translations.mdx",tags:[],version:"current",frontMatter:{title:"Persist Translations",description:"Plugins - Persist Translations | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Message Format",permalink:"/transloco/docs/plugins/message-format"},next:{title:"Persist Lang",permalink:"/transloco/docs/plugins/persist-lang"}},i={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Clear Storage",id:"clear-storage",level:2}];function d(n){const s={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(s.p,{children:"This plugin provides the functionality of persisting translations to the provided storage."}),"\n",(0,o.jsx)(s.h2,{id:"installation",children:"Installation"}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-bash",children:"npm install @jsverse/transloco-persist-translations\n"})}),"\n",(0,o.jsx)(s.h2,{id:"usage",children:"Usage"}),"\n",(0,o.jsxs)(s.p,{children:["Add persist translation providers using the into the ",(0,o.jsx)(s.code,{children:"TranslocoRootModule"}),"/",(0,o.jsx)(s.code,{children:"app.config.ts"}),", and provide the storage you would like to use:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",metastring:'title="transloco-root.module.ts"',children:"import {provideTranslocoPersistTranslations} from '@jsverse/transloco-persist-translations';\n\nimport { TranslocoHttpLoader } from './transloco-loader';\n\n@NgModule({\n  providers: [\n      provideTranslocoPersistTranslations({\n        loader: TranslocoHttpLoader, // ====> Auto generated via ng add\n        storage: { useValue: localStorage }\n      })\n  ],\n  ...\n})\nexport class TranslocoRootModule {}\n"})}),"\n",(0,o.jsxs)(s.p,{children:["Note that you should ",(0,o.jsx)(s.strong,{children:"not"})," include the default loader to make it work."]}),"\n",(0,o.jsxs)(s.p,{children:["You can also use an async storage. For example, let's install ",(0,o.jsx)(s.a,{href:"https://github.com/localForage/localForage",children:"localForage"})," and use ",(0,o.jsx)(s.code,{children:"IndexedDB"}),":"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",metastring:'title="transloco-root.module.ts"',children:"import {provideTranslocoPersistTranslations} from '@jsverse/transloco-persist-translations';\nimport * as localForage from 'localforage';\n\nimport { TranslocoHttpLoader } from './transloco-loader';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'Transloco',\n  storeName: 'translations'\n});\n\n@NgModule({\n  providers: [\n      provideTranslocoPersistTranslations({\n        loader: TranslocoHttpLoader, // ====> Auto generated via ng add\n        storage: { useValue: localForage }\n      })\n  ],\n  ...\n})\nexport class TranslocoRootModule {}\n"})}),"\n",(0,o.jsx)(s.h2,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(s.p,{children:[(0,o.jsx)(s.code,{children:"provideTranslocoPersistTranslations"})," can also receive the following configuration:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",children:'{\n  "ttl": 86400,\n  "storageKey": "yourKey"\n}\n'})}),"\n",(0,o.jsxs)(s.ul,{children:["\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"ttl"}),": How long the cache should live in seconds."]}),"\n",(0,o.jsxs)(s.li,{children:[(0,o.jsx)(s.code,{children:"storageKey"}),": The key to be used to save the translations data."]}),"\n"]}),"\n",(0,o.jsx)(s.h2,{id:"clear-storage",children:"Clear Storage"}),"\n",(0,o.jsxs)(s.p,{children:["The storage cleanup is done automatically once the ",(0,o.jsx)(s.code,{children:"ttl"})," is passed, but it could also can be done manually by calling ",(0,o.jsx)(s.code,{children:"clearCache"})," method from the cache service:"]}),"\n",(0,o.jsx)(s.pre,{children:(0,o.jsx)(s.code,{className:"language-ts",metastring:'title="app.component.ts"',children:"import { TranslocoPersistTranslations } from '@jsverse/transloco-persist-translations';\n\nexport class AppComponent {\n  constructor(private loader: TranslocoPersistTranslations) {}\n\n  clearTranslationsCache() {\n    this.loader.clearCache();\n  }\n}\n"})})]})}function u(n={}){const{wrapper:s}={...(0,t.R)(),...n.components};return s?(0,o.jsx)(s,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,s,e)=>{e.d(s,{R:()=>a,x:()=>l});var o=e(6540);const t={},r=o.createContext(t);function a(n){const s=o.useContext(r);return o.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function l(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),o.createElement(r.Provider,{value:s},n.children)}}}]);