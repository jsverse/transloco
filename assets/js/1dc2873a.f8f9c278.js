"use strict";(self.webpackChunktransloco_docs=self.webpackChunktransloco_docs||[]).push([[4860],{101:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var i=t(2540),a=t(3023);const s={id:"translation-in-the-template",title:"Translation in The Template",description:"Translation in The Template | Transloco Angular i18n"},r=void 0,l={id:"translation-in-the-template",title:"Translation in The Template",description:"Translation in The Template | Transloco Angular i18n",source:"@site/docs/translation-in-template.mdx",sourceDirName:".",slug:"/translation-in-the-template",permalink:"/transloco/docs/translation-in-the-template",draft:!1,unlisted:!1,editUrl:"https://github.com/jsverse/transloco/edit/master/docs/docs/translation-in-template.mdx",tags:[],version:"current",frontMatter:{id:"translation-in-the-template",title:"Translation in The Template",description:"Translation in The Template | Transloco Angular i18n"},sidebar:"docs",previous:{title:"Config Options",permalink:"/transloco/docs/getting-started/config-options"},next:{title:"Translation API",permalink:"/transloco/docs/translation-api"}},o={},c=[{value:"Structural Directive",id:"structural-directive",level:2},{value:"Utilizing the <code>prefix</code> input",id:"utilizing-the-prefix-input",level:3},{value:"Pipe",id:"pipe",level:2},{value:"Attribute Directive",id:"attribute-directive",level:2}];function d(e){const n={admonition:"admonition",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"structural-directive",children:"Structural Directive"}),"\n",(0,i.jsxs)(n.p,{children:["Using a structural directive is the ",(0,i.jsx)(n.strong,{children:"recommended"})," approach. It's DRY and efficient, as it creates one subscription per template:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<ng-container *transloco=\"let t\">\n  <p>{{ t('title') }}</p>\n\n  <comp [title]=\"t('title')\"></comp>\n</ng-container>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Note that the ",(0,i.jsx)(n.code,{children:"t"})," function is ",(0,i.jsx)(n.strong,{children:"memoized"}),". It means that given the same key it will return the result directly from the cache."]}),"\n",(0,i.jsxs)(n.p,{children:["We can pass a ",(0,i.jsx)(n.code,{children:"params"})," object as the second parameter:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<ng-container *transloco=\"let t\">\n  <p>{{ t('name', { name: 'Transloco' }) }}</p>\n</ng-container>\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="en.json"',children:'{\n  "name": "My name is {{name}}"\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We can instruct the directive to use a ",(0,i.jsx)(n.code,{children:"different"})," language in our template:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'{1} title="home.component.html"',children:"<ng-container *transloco=\"let t; lang: 'es'\">\n  <p>{{ t('title') }}</p>\n</ng-container>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["This will translate each key based on the ",(0,i.jsx)(n.code,{children:"Spanish"})," language translation file."]}),"\n",(0,i.jsxs)(n.h3,{id:"utilizing-the-prefix-input",children:["Utilizing the ",(0,i.jsx)(n.code,{children:"prefix"})," input"]}),"\n",(0,i.jsx)(n.admonition,{type:"important",children:(0,i.jsxs)(n.p,{children:["This input was previously named ",(0,i.jsx)(n.code,{children:"read"})," and was renamed to ",(0,i.jsx)(n.code,{children:"prefix"})," starting v7.1.0.",(0,i.jsx)("br",{}),"\nThe ",(0,i.jsx)(n.code,{children:"read"})," input is deprecated and will be removed in v8."]})}),"\n",(0,i.jsxs)(n.p,{children:["We can use the ",(0,i.jsx)(n.code,{children:"prefix"})," input in the structural directive to get translations of a particular nested (including deeply nested) property."]}),"\n",(0,i.jsxs)(n.p,{children:["Let's say we need to use the ",(0,i.jsx)(n.code,{children:"dashboard"})," scope all over the template. Given this translation file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",metastring:'title="en.json"',children:'{\n  "foo": "Foo",\n  "bar": "Bar",\n  "dashboard": {\n    "title": "Dashboard Title",\n    "desc": "Dashboard Desc"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"we can write:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'{1} title="home.component.html"',children:"<ng-container *transloco=\"let t; prefix: 'dashboard'\">\n  <p>{{ t('title') }}</p>\n</ng-container>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["without having to repeat the ",(0,i.jsx)(n.code,{children:"dashboard"})," key in each translation. Under the hood, it will do the following for you:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<ng-container *transloco=\"let t;\">\n  <h1>{{ t('dashboard.title') }}</h1>\n  <p>{{ t('dashboard.desc') }}</p>\n</ng-container>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"pipe",children:"Pipe"}),"\n",(0,i.jsxs)(n.p,{children:["The second option we have is to use the ",(0,i.jsx)(n.code,{children:"transloco"})," pipe:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<span>{{ 'home' | transloco }}</span>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use it with ",(0,i.jsx)(n.code,{children:"params"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<span>{{ 'alert' | transloco: { value: dynamic } }}</span>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use it with ",(0,i.jsx)(n.code,{children:"inputs"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<span [attr.alt]=\"'hello' | transloco\">Attribute</span>\n<span [title]=\"'hello' | transloco\">Property</span>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Use it with a different ",(0,i.jsx)(n.code,{children:"language"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:"<span>{{ 'alert' | transloco:params:'es' }}</span>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"attribute-directive",children:"Attribute Directive"}),"\n",(0,i.jsxs)(n.p,{children:["The last option we have is to use ",(0,i.jsx)(n.code,{children:"transloco"})," attribute directive:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:'<span transloco="home"></span>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use it with ",(0,i.jsx)(n.code,{children:"params"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:'<span transloco="alert" [translocoParams]="{ value: dynamic }"></span>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Use it with a different ",(0,i.jsx)(n.code,{children:"language"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",metastring:'title="home.component.html"',children:'<span transloco="home" translocoLang="es"></span>\n'})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var i=t(3696);const a={},s=i.createContext(a);function r(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);